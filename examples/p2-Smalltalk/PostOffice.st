Object subclass: #Customer	instanceVariableNames: 'name'	classVariableNames: ''	package: 'GtDemos-PostOffice'!!Customer methodsFor: 'accessing'!name	^ name! !!Customer methodsFor: 'accessing'!name: aString	name := aString! !!Customer methodsFor: 'actions'!enters: aPostOffice	aPostOffice enqueue: self! !!Customer methodsFor: 'printing'!printOn: aStream	self name printOn: aStream! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'instance creation'!named: aString	^ self new name: aString! !Object subclass: #PostOffice	instanceVariableNames: 'queue'	classVariableNames: ''	package: 'GtDemos-PostOffice'!!PostOffice commentStamp: '<historical>' prior: 0!I am a demo of a simple Post Office object that queues  up Customers and serves them.

[[[PostOffice gtExamples collect: [:each | each run returnValue]]]]

!!PostOffice methodsFor: 'testing'!isEmpty	^ queue isEmpty! !!PostOffice methodsFor: 'actions'!serveCustomer	^ queue ifEmpty: [ nil ] ifNotEmpty: [ queue removeFirst ]! !!PostOffice methodsFor: 'actions'!enqueue: aCustomer	queue addLast: aCustomer! !!PostOffice methodsFor: 'printing'!printOn: aStream	'aPostOffice' printOn: aStream.	queue printElementsOn: aStream! !!PostOffice methodsFor: 'initialization'!initialize	queue := OrderedCollection new! !!PostOffice methodsFor: 'examples'!emptyPostOffice	<gtExample>	| po |	po := PostOffice new.	self assert: po isEmpty.	^ po! !!PostOffice methodsFor: 'examples' stamp: 'GlamorousAuthor 1/7/2021 16:50'!postOfficeWithJack	<gtExample>	| po |	po := self emptyPostOffice.	(Customer named: 'Jack') enters: po.	self assert: po waiting equals: 1.	^ po! !!PostOffice methodsFor: 'examples' stamp: 'GlamorousAuthor 1/7/2021 16:53'!postOfficeWithJackAndJillServed	<gtExample>	| po |	po := self postOfficeWithJackServed.	self assert: po serveCustomer name equals: 'Jill'.	self assert: po waiting equals: 0.	self assert: po serveCustomer isNil.	^ po! !!PostOffice methodsFor: 'examples'!postOfficeWithJillServed	<gtExample>	| po |	po := self postOfficeWithJaneServed.	self assert: po serveCustomer name equals: 'jill'.	self assert: po waiting equals: 0.	self assert: po serveCustomer isNil.	^ po! !!PostOffice methodsFor: 'examples' stamp: 'GlamorousAuthor 1/7/2021 16:52'!postOfficeWithJackServed	<gtExample>	| po |	po := self postOfficeWithJackAndJill.	self assert: po serveCustomer name equals: 'Jack'.	self assert: po waiting equals: 1.	^ po! !!PostOffice methodsFor: 'examples' stamp: 'GlamorousAuthor 1/7/2021 16:51'!postOfficeWithJackAndJill	<gtExample>	| po |	po := self postOfficeWithJack.	(Customer named: 'Jill') enters: po.	self assert: po waiting equals: 2.	^ po! !!PostOffice methodsFor: 'querying'!waiting	^ queue size! !