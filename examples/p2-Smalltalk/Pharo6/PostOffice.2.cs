'From Squeak3.9.1 of 2 March 2008 [latest update: #7075] on 7 May 2009 at 10:41:30 am'!Object subclass: #Customer	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'PostOffice'!Object subclass: #PostOffice	instanceVariableNames: 'queue'	classVariableNames: ''	poolDictionaries: ''	category: 'PostOffice'!TestCase subclass: #PostOfficeTest	instanceVariableNames: 'postoffice'	classVariableNames: ''	poolDictionaries: ''	category: 'PostOffice'!WAComponent subclass: #PostOfficeView	instanceVariableNames: 'postoffice customerName'	classVariableNames: ''	poolDictionaries: ''	category: 'PostOffice'!!Customer methodsFor: 'creation' stamp: 'onierstrasz 5/7/2009 09:46'!name	^ name! !!Customer methodsFor: 'creation' stamp: 'onierstrasz 5/7/2009 09:42'!named: aByteString 	name := aByteString ! !!Customer methodsFor: 'evaluating' stamp: 'onierstrasz 5/7/2009 09:43'!enters: aPostOffice 	aPostOffice enqueues: self! !!Customer class methodsFor: 'instance creation' stamp: 'onierstrasz 5/7/2009 09:42'!named: aByteString 	^ self new named:aByteString ! !!PostOffice methodsFor: 'initialize-release' stamp: 'onierstrasz 5/7/2009 09:41'!initialize	queue := OrderedCollection new! !!PostOffice methodsFor: 'testing' stamp: 'onierstrasz 5/7/2009 09:41'!isEmpty	^ queue isEmpty! !!PostOffice methodsFor: 'evaluating' stamp: 'onierstrasz 5/7/2009 09:58'!customersDo: aBlock	^ queue do: aBlock! !!PostOffice methodsFor: 'evaluating' stamp: 'onierstrasz 5/7/2009 09:44'!enqueues: aCustomer 	queue addLast: aCustomer ! !!PostOffice methodsFor: 'evaluating' stamp: 'onierstrasz 5/7/2009 10:25'!serveCustomer	^ queue ifNotEmpty: [queue removeFirst name]! !!PostOffice methodsFor: 'evaluating' stamp: 'onierstrasz 5/7/2009 09:44'!waiting	^ queue size! !!PostOfficeTest methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 09:40'!setUp	postoffice := PostOffice new.! !!PostOfficeTest methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 10:34'!testPostOffice	self assert: postoffice isEmpty.	(Customer named: 'jack') enters: postoffice.	self assert: postoffice waiting equals: 1.	(Customer named: 'jane') enters: postoffice.	self assert: postoffice waiting equals: 2.	(Customer named: 'jill') enters: postoffice.	self assert: postoffice waiting equals: 3.	self assert: postoffice serveCustomer equals: 'jack'.	self assert: postoffice waiting equals: 2.	self assert: postoffice serveCustomer equals: 'jane'.	self assert: postoffice waiting equals: 1.	self assert: postoffice serveCustomer equals: 'jill'.	self assert: postoffice waiting equals: 0.	self assert: postoffice serveCustomer isNil.! !!PostOfficeView methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 10:15'!customerName	^ customerName! !!PostOfficeView methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 10:15'!customerName: aString	customerName := aString! !!PostOfficeView methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 10:09'!initialize	super initialize.	postoffice := PostOffice new! !!PostOfficeView methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 10:40'!renderContentOn: html 	html heading: 'Welcome to the Post Office!!'.	html form: [		html text: 'Customer:'.		html textInput on: #customerName of: self.		html submitButton text: 'enter';			callback: [(Customer named: self customerName) enters: postoffice]		].	html form: [		html submitButton text: 'Serve a customer';			callback: [postoffice serveCustomer ]		].	html horizontalRule.	html heading		level: 2;		with: 'Waiting customers:'.	html table: [postoffice				customersDo: [:each | html						tableRow: [html tableData: each name]]].! !!PostOfficeView class methodsFor: 'as yet unclassified' stamp: 'onierstrasz 5/7/2009 09:52'!canBeRoot	^ true! !